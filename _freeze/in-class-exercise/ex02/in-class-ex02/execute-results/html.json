{
  "hash": "9ca6d8ba32fd471a46c758905397e4a2",
  "result": {
    "markdown": "---\ntitle: \"In-class-exercise 02 (reviewing Hands-exercise 02)\"\nauthor: \"Heng Kuan Xin\"\ndate: 2024-08-26\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  freeze: true\n  output: true\n  warning: false\n  error: false\ntoc-depth: 5\n---\n\n\n## 1.0 Working with Master Plan Planning Sub-zone Data\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\n\npacman::p_load(sf, tidyverse, tmap)\n\n#pacman::p_load(sf, tidyverse, ggstatsplot, tmap)\n```\n:::\n\n\n### 1.1 The code\n\nWe are going to import the Master Plan 2014 Subzone Boundary Web (file format .shp and .kml) retrieved from data.gov.sg.\n\nThis code chunk imports the shapefile data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_shp <- st_read(dsn=\"data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", \n                    layer=\"MP14_SUBZONE_WEB_PL\")\n```\n:::\n\n\nIn RStudio, check the `Help` tab to search for library functions, it will show you the input arguments and the output.\n\n### 1.2 Checking the class info.\n\nWhenever you import data, make sure to view the data and understand what data types, data formats, crs (coordinate reference systems), geometry type, and so on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mpsz_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n:::\n\n**Note**: when reading data types: \n\n- `int` : an integer \n- `num` : numerical; can be any real number \n- `chr` : characters - geometry : sf's geometry data. \n  - E.g. \"sfc_MULTIPOLYGONS\" if the package detects multipolygons.\n\nrefer to [basic data types in R](https://resbaz.github.io/2014-r-materials/lessons/01-intro_r/data-structures.html)\n\n\n### 2.0 Bad Data\n\nThis code chunk tries to import the kml data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mpsz_kml <- st_read(\"data/geospatial/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n# This data file cannot be used; The data source is corrupted.\n```\n:::\n\n\n\nThere might be a reasons why the kml cannot be used: (1) it is a zipped file, or (2) the file got tampered/corrupted during the uploading process. \n\nIf you want to convert to another file format, you can generate it using sf::st_write().\n\n### 2.1 Generating KML file from sf object we imported from the SHP file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| output: false\n\nst_write(mpsz_shp,\n         \"data/geospatial/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE) # delete old file if exists.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeleting source `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n:::\n:::\n\n\n\n## 3. Choosing Good Data sets\n\n### 3.1 Pre-school locations\n\ndownload and load the preschool locations from data.gov.sg\n\nTO BE COMPLETED\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#import data set\npreschool_kml <- st_read(dsn=\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\hengkuanxin\\SMU_Geospatial_Analytics\\in-class-exercise\\ex02\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\n# preschool_geojson <- st_read(\"data/geospatial/PreschoolsLocation.geojson\")\n```\n:::\n\n\n### 3.2 Masterplan 2019 Sub-zone\n\n::: {.cell}\n\n```{.r .cell-code}\n#import data set\nmpsz19_kml <- st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nmpsz19_shp <- st_read(dsn=\"data/geospatial/MPSZ-2019\",\n                      layer=\"MPSZ-2019\")\n```\n:::\n\nNote the differences: both have 332 features, but one has 2+1 fields, the other has 6+1 fields.\nKML has nested multiple attributes within 1 column. The KML file format in this context is harder to use than the SHP file format.\n\n### 3.3 Transforming the CRS\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp_3414 <- mpsz19_shp %>%\n  st_transform(crs=3414)\n```\n:::\n\n\nEPSG:3414 refers to Singapore's projected coordinate system (SVY21), as opposed to WGS84. A projected coordinate system uses distances measure, rather than degrees (latitude, longitude)\n\n\n## 4.0 Working with Population Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop2023 <- read_csv(\"data/aspatial/respopagesextod2023.csv\", )\n\n# show column data types\nspec(pop2023)\n```\n:::\n\n\n**Note**: Ease of use of data: see how the columns and data are categorised between different the different data sets `respopagesextod2023.csv` and `respopagesextod2023.xlsx`. Check the other data sets: `respopagesexfa2023.csv`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop2023_sum <- pop2023 %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()\n\ncolnames(pop2023_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PA\"  \"SZ\"  \"AG\"  \"POP\"\n```\n:::\n\n```{.r .cell-code}\npop2023_sum <- pop2023_sum %>%\n  pivot_wider(names_from = `AG`,\n              values_from = `POP`)\n\ncolnames(pop2023_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n:::\n:::\n\n\nNote: tidyverse is a collection of packages for data science, also called a disjointed integrated packages. The separate packages maintained separately and do not contain same function names. Collectively, they might conflict with Base R functions, however; e.g. dpylr::filter().\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop2023_sum <- pop2023_sum %>%\n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[14])) %>% # add YOUNG = sum across the row where index = [3:6] and [15] \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %>% # add ECONOMY ACTIVE\n  mutate(`AGED`= rowSums(.[16:21])) %>% # add AGED\n  mutate(`TOTAL`= rowSums(.[3:21])) %>% # add TOTAL\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>% # add DEPENDENCY\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\ncolnames(pop2023_sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"PA\"             \"SZ\"             \"YOUNG\"          \"ECONOMY ACTIVE\"\n[5] \"AGED\"           \"TOTAL\"          \"DEPENDENCY\"    \n```\n:::\n:::\n\n\n### Join together population data with geospatial data (masterplan sub-zone)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert PA and SZ variable data to upper cases to match SUBZONE_N and PLN_AREA_N of mspz\npop2023_sum <- pop2023_sum %>%\n  mutate_at(.vars = vars(PA, SZ),      # mutate at variables PA , SZ\n          .funs = list(toupper)) %>%   # apply function list(toupper)\n  filter(`ECONOMY ACTIVE` > 0)\n\n\n# left join by SUBZONE_N = SZ\nmpsz19_shp_3414 <- left_join(mpsz19_shp_3414, pop2023_sum,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}