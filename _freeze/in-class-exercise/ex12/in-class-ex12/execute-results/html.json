{
  "hash": "5447e6610e0182f83f582ca6ac3d3e43",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"12 In-class Exercise (Review)\"\nauthor: \"Heng Kuan Xin\"\ndate: 2024-11-11\ndate-modified: \"last-modified\"\n\ntoc: true\ntoc-expand: true\nnumber-sections: true\n\nexecute:\n  eval: false\n  echo: true\n  freeze: true\n  output: true\n  warning: false\n  error: false\n---\n\n\n\n# Notes on Configuring App Inputs\n\n-   Note that while you can allow users to have the freedom to choose the inputs, such as how much % of the data set to sample and use for regression analysis, to use for test or train data, you should try out the different possible inputs and observe how long the app will take to run for the user.\n\n-   Remember to always set seed whenever you are doing random selection or any random process, so that your results are reproducable, for yourself and the user.\n\n# In-class Exercise\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n\n## Multicollinearity Check\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>% st_drop_geometry() # no need geometry\n\nggstatsplot::ggcorrmat(mdata_nogeo[,2:17])\n```\n:::\n\n\n\n## Model callibration\n\nFind the suitable bandwidth first, before applying it to the gwr regression model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +\n                            storey_order + remaining_lease_mths +\n                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          approach=\"CV\",\n                          kernel=\"gaussian\",\n                          adaptive=TRUE,\n                          longlat=FALSE)\n```\n:::\n\n\n\n## Predictive Modelling with RF Method\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract coordinates from your samples\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Random Forest Model\nrf <- ranger(resale_price ~ floor_area_sqm +\n                            storey_order + remaining_lease_mths +\n                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL +\n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,\n                          data=train_data_nogeom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predicT(rf,\n                   data = test_data_nogeom)\n\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}