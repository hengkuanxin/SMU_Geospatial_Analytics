---
title: "Exercise 01 'Geospatial Data Science with R'"
author: "Heng Kuan Xin"
date: 2024-08-20
date-modified: 2024-08-20
execute: 
  eval: true
  echo: true
  freeze: true
---

(Copied from Exercise) Learning Outcome:

-   installing and loading **sf** and **tidyverse** packages into R environment,
-   importing geospatial data by using appropriate functions of **sf** package,
-   importing aspatial data by using appropriate function of **readr** package,
-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,
-   assigning or transforming coordinate systems by using using appropriate **sf** functions,
-   converting an aspatial data into a **sf** data frame by using appropriate function of **sf** package,
-   performing geoprocessing tasks by using appropriate functions of **sf** package,
-   performing data wrangling tasks by using appropriate functions of **dplyr** package and
-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

### 1 Import packages

```{r}
pacman::p_load(sf, tidyverse)
```

### 2 Import data

The data used in this assignment is acquired from publicly available sources:

1.  Master Plan 2014 Subzone Boundary (Web) from data.gov.sg
2.  Pre-Schools Location from data.gov.sg
3.  Cycling Path from LTADataMall
4.  Latest version of Singapore Airbnb listing data from Inside Airbnb

```{r}

# Singapore Master Plan 2014 Subzone Boundary (polygon feature)
mpsz <- st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", 
                layer = "MP14_SUBZONE_WEB_PL")

# Singapore Cycling Paths (line feature)
cyclingpath <- st_read(dsn="data/geospatial/CyclingPath_Jul2024",
                       layer = "CyclingPathGazette")

# Singapore Preschool Locations (point feature)
preschool <- st_read("data/geospatial/PreSchoolsLocation.kml")

# The above files are read as different geometry-type data frames (as a 'simple feature')

# Airbnb Listing Data (aspatial, but contains coordinate attributes)
airbnb_listings <- read_csv("data/aspatial/listings.csv",
                            show_col_types = FALSE)

# The above file is read as a data frame.

```

### 3 Read geometry data

#### Retrieve Geometry List 
```{r}

# Retrieve geometry list to see detailed information

st_geometry(mpsz)

#alternatively, use mpsz$geom or mpsz[[1]]

# Output: 
# Geometry set for 323 features 
# Geometry type: MULTIPOLYGON
# Dimension:     XY
# Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33
# Projected CRS: SVY21
# First 5 geometries:...

```

#### Show data type of each attribute/field

```{r}

# Retrieve data type of every attribute in the data frame
glimpse(mpsz)

# Rows: 323
# Columns: 16
# $ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13…
# $ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, …
# $ SUBZONE_N  <chr> "MARINA SOUTH", "PEARL'S HILL", "BOAT QUA…
# $ SUBZONE_C  <chr> "MSSZ01", "OTSZ01", "SRSZ03", "BMSZ08", "…
# $ CA_IND     <chr> "Y", "Y", "Y", "N", "N", "N", "N", "Y", "…
# $ PLN_AREA_N <chr> "MARINA SOUTH", "OUTRAM", "SINGAPORE RIVE…
# $ PLN_AREA_C <chr> "MS", "OT", "SR", "BM", "BM", "BM", "BM",…
# $ REGION_N   <chr> "CENTRAL REGION", "CENTRAL REGION", "CENT…
# $ REGION_C   <chr> "CR", "CR", "CR", "CR", "CR", "CR", "CR",…
# $ INC_CRC    <chr> "5ED7EB253F99252E", "8C7149B9EB32EEFC", "…
# $ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014…
# $ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 2…
# $ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 3…
# $ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2…
# $ SHAPE_Area <dbl> 1630379.3, 559816.2, 160807.5, 595428.9, …
# $ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30.…
```

#### Show first n rows of data frame

```{r}
head(mpsz, n=5)
```

### 4 Plot Geospatial Data

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above.

```{r}
plot(mpsz)
```

#### Plot geometry only

```{r}
plot(st_geometry(mpsz))
```

#### Plot by attribute

```{r}
plot(mpsz["PLN_AREA_N"]) # specify a particular attribute used to plot sf object
```

### 5 View CRS details and assign a new EPSG code

```{r}

# Retrieve CRS details
st_crs(mpsz)

# Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.

#In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.
```

#### Set new CRS

```{r}

# set crs to EPSG:3414, also called SVY21
mpsz3414 <- st_set_crs(mpsz, 3414)

```

### 6 CRS Transformation

```{r}

# Observe that preschool uses WGS84 for its CRS
st_geometry(preschool)

# To standardise the coordinate reference system, we will convert it into Singapore's standard CRS SVY21

# WGS84(Geodetic CRS) to SVY21(Projected CRS)

preschool3414 <- st_transform(preschool,
                              crs = 3414)

```

### 7 Converting Aspatial Data

```{r}

# airbnb_listings is an aspatial data, but it contains coordinates in the form of longitude and latitude.

# we will create a sf data frame using the coordinates
airbnb_listings_sf <- st_as_sf(airbnb_listings,
                               coords = c("longitude","latitude"),
                               crs = 4326) %>%
  st_transform(crs=3414)

# EPSG:4326 is inferred from the data source, and it is also the standard CRS based on WGS84. The coordinates are in degrees (long, lat)

glimpse(airbnb_listings_sf)

```

### 8 Geoprocessing with sf package

#### Buffer around geometry

```{r}

# we will create a buffer around the whole stretch of the cycling paths (line feature), this will also convert the line feature into a polygon feature.

buffer_cycling <- st_buffer(cyclingpath,
                            dist = 5,
                            nQuadSegs = 30)

# the cycling path is now a polygon feature
st_geometry(buffer_cycling)

buffer_cycling$area <- st_area(buffer_cycling)

sum(buffer_cycling$area)

```

#### Point-in-polygon count

```{r}

# we will find out how many Preschools (point feature) exist within each planning subzone (polygon feature)


mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414,preschool3414))

summary(mpsz3414$`PreSch Count`)

```

```{r}
# list the planning subzone with the most number of pre-school

top_n(mpsz3414, 1, `PreSch Count`)

```

#### Calculate the density of 'pre-School by planning subzone'

Steps:

- Calculate area of each planning subzone
- Count number of pre-school per area (in each planning subzone)

```{r}

# Calculate area of each planning subzone
mpsz3414$Area <- mpsz3414 %>% 
  st_area()

glimpse(mpsz3414)
```

```{r}

# Create new column called 'PreSch Density' by dividing areschool count by area (multiplied by 1000000 as area is in millions)

mpsz3414 <- mpsz3414 %>% mutate(`PreSch Density` = `PreSch Count`/ Area * 1000000)

glimpse(mpsz3414)

```

### 9 Exploratory Data Analysis

```{r}

# "In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes."

# plot the histogram to observe distribution of preschool density (count per area in subzone)

hist(mpsz3414$`PreSch Density`)

```

```{r}

# to improve on visualisation, we will specify the mapping aesthetics + histogram(bin size, color, fill) + labels

ggplot(
  data = mpsz3414, 
  mapping = aes(
    x = as.numeric(`PreSch Density`))
  ) +
  geom_histogram(
    bins=20, 
    color= 'black', 
    fill="light blue"
  ) +
  labs(
    title = "Are pre-school even distributed in Singapore?",
    subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
    x = "Pre-school density (per km sq)",
    y = "Frequency"
  )



```

```{r}

# a scatter plot: using PreSch Density as x, PreSch Count as y, adding color by their region names + point plot

ggplot(
  data = mpsz3414, 
  mapping = aes(
    x = as.numeric(`PreSch Density`),
    y = `PreSch Count`,
    color = REGION_N)
  ) +
  geom_point()



```