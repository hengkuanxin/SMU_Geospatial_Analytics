---
title: "03 (Part 2) '2nd Order Spatial Point Patterns Analysis Methods'"
author: "Heng Kuan Xin"
date: 2024-08-29
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
  output: true
  warning: false
  error: false
toc-depth: 5
---

This is the Part 2 of the Point Pattern Analysis

Same data will be used as Hands-on Exercise 3 (Part 1), namely:

-   `CHILDCARE` a point feature layer of childcare centres in Singapore.
-   `MP14_SUBZONE_WEB_PL` a polygon feature layer of the URA master plan 2014 subzones boundaries.
-   `CostalOutline` a polygon feature showing the national boundary of Singapore.

## 1 Importing Packages and Data

```{r}
pacman::p_load(sf, spatstat, raster, tmap, rvest, tidyverse)
```

```{r}
#| output: false
# childcare services data
childcare_sf <- st_read(dsn="data/geospatial/child-care-services-geojson.geojson")

# coastal outline data
sg_sf <- st_read(dsn="data/geospatial", layer="CostalOutline")

# master plan subzone boundary data
mpsz_sf <- st_read(dsn="data/geospatial", layer = "MP14_SUBZONE_WEB_PL")

# notice childcare_sf is in WGS84, transform it into SV21:
childcare_sf <- childcare_sf %>% st_transform(crs=3414)

```

```{r}
# childcare_sf
# sg_sf
# mpsz_sf
```

```{r}
#| output: false

# sg_sf # need to set CRS, no need transform
# mpsz_sf # need to set CRS, no need transform


# change CRS to EPSG:3414
st_crs(sg_sf) <- 3414
st_crs(mpsz_sf) <- 3414

st_crs(sg_sf) # need to set CRS, no need transform
st_crs(mpsz_sf) # need to set CRS, no need transform

```

### Geospatial Data Wrangling

```{r}
childcare_ppp <- 
  as.ppp(st_coordinates(childcare_sf), 
         st_bbox(childcare_sf)) %>% 
  unmark()
childcare_ppp
```

```{r}
plot(childcare_ppp)
summary(childcare_ppp)
```

```{r}
# any(duplicated(childcare_ppp))
# sum(duplicated(childcare_ppp))
# multiplicity(childcare_ppp)
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots(alpha=0.5, 
          size=0.05)

tmap_mode('plot')
```

```{r}

# jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.
childcare_ppp_jit <- 
  rjitter(childcare_ppp, 
  retry=TRUE, 
  nsim=1, 
  drop=TRUE)
```

```{r}

# check for any duplicated points
any(duplicated(childcare_ppp_jit))
sum(duplicated(childcare_ppp_jit))
# multiplicity(childcare_ppp_jit)
sum(multiplicity(childcare_ppp_jit) > 1)
```

### Create SG Owin object (Window) to Extract Regional PPP

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
summary(sg_owin)
```

```{r}
# Combines point events object and Owin object 
# Extract only childcare point events within Singapore's boundaries
childcareSG_ppp <- childcare_ppp_jit[sg_owin]

## Observe, any difference?
childcare_ppp
childcareSG_ppp
class(childcare_ppp)
class(childcareSG_ppp)
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

```{r}

# Extract Planning Areas
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
plot(pg, main="OVERVIEW OF PUNGGOL DATA")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

```{r}

# Convert into Owin objects (to extract PPP for each planning areas):
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)

class(pg_owin)
class(tm_owin)
class(ck_owin)
class(jw_owin)
```

```{r}

# After selecting the Owin object, we can extract ppp within Owin object.
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

```{r}
# Transform by 1000 times, from m to km, for KDE later
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

```{r}
# Display plot overview
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

## 2 Analysing Spatial Point Process Using G-Function

### Choa Chu Kang planning area

#### Nearest Neighbour Distance Function G

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, you will learn how to compute G-function estimation by using [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

| Gest(X, r=NULL, breaks=NULL, ...,
|     correction=c("rs", "km", "han"),
|     domain=NULL)

```{r}

# Compute G function, using Gest() of spatat package
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500), main="G-Function, Choa Chu Kang")
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function

```{r}
#| output: false
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

### Tampines planning area

#### Nearest Neighbour Distance Function G

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "all")
plot(G_tm)
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
#| output: false
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

## 3 Analysing Spatial Point Process Using F-Function

### Choa Chu Kang planning area

#### Estimate the Empty Space Function or its Hazard Rate Function F(r) or h(r)

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, you will learn how to compute F-function estimation by using [*Fest()*](https://rdrr.io/cran/spatstat/man/Fest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html) of **spatstat** package.

| Fest(X, ..., eps, r=NULL, breaks=NULL,
|     correction=c("rs", "km", "cs"),
|     domain=NULL)

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-fucntion

```{r}
#| output: false
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

### Tampines planning area

#### Estimate the Empty Space Function or its Hazard Rate Function F(r) or h(r)

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
#| output: false

F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

## 4 Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [*Kest()*](https://rdrr.io/cran/spatstat/man/Kest.html) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

|  Kest(X, ..., r=NULL, rmax=NULL, breaks=NULL,
|     correction=c("border", "isotropic", "Ripley", "translate"),
|    nlarge=3000, domain=NULL, var.approx=FALSE, ratio=FALSE)

### Choa Chu Kang planning area

#### Estimate K-Function

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
#| output: false
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### Tampines planning area

#### Estimate K-Function

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines **are randomly** distributed.

H1= The distribution of childcare services at Tampines are **not randomly** distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
#| output: false
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

## 5 Analysing Spatial Point Process Using L-Function

In this section, you will learn how to compute L-function estimation by using [Lest()](https://www.rdocumentation.org/packages/spatstat.core/versions/2.3-1/topics/Lest) of **spatstat** package. You will also learn how to perform monta carlo simulation test using *envelope()* of spatstat package.

### Choa Chu Kang planning area

#### Estimate L Function

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
#| output: false
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

### Tampines planning area

#### Estimate L Function

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

#### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing.

```{r}
#| output: false
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

## Summary

Estimate Functions we went through:

-   [Gest()](https://www.rdocumentation.org/packages/spatstat.core/versions/2.3-1/topics/Gest), [Fest()](https://search.r-project.org/CRAN/refmans/spatstat.explore/html/Fest.html), [Kest()](https://search.r-project.org/CRAN/refmans/spatstat.explore/html/Kest.html), [Lest()](https://search.r-project.org/CRAN/refmans/spatstat.explore/html/Lest.html)
-   The G function measures the distribution of the distances from an arbitrary event to its nearest event.
-   The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.
-   K-function measures the number of events found up to a given distance of any particular event
-   The command Lest first calls Kest to compute the estimate of the K-function, and then applies the square root transformation. The transformation to LL was proposed by Besag (1977).

Followed by a Complete Spatial Randomness Test:

-   If the data exhibits complete spatial randomness, this implies that there is no underlying structure in the data.
-   first compute simulation envelopes of a summary function.
-   TO BE STUDIED
