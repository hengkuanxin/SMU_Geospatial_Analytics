---
title: "01 Take Home Exercise 1"
subtitle: "Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar"
author: "Heng Kuan Xin"
date: 2024-09-04
date-modified: "last-modified"

# toc: true
# toc-expand: true
number-sections: true

execute:
  eval: true
  echo: true
  freeze: true
  output: true
  warning: false
  error: false
---

Data sets:

-   [Data Set Columns Information](https://acleddata.com/knowledge-base/codebook/)
-   [Data Set Myanmar Overview](https://acleddata.com/knowledge-base/acled-methodology-and-coding-decisions-around-political-violence-and-demonstrations-in-myanmar/)
-   Categories by Event Type: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.
-   In terms of study period, students should focus on quarterly armed conflict events from January 2021 until June 2024.

Importing Data sets:

Bullet points:

-   point 1 on lesson 1 (dataset: administrative boundary data -\> sf tibble dataframe)
-   point 2 and 3 last week lesson 3 (dataset: ACLED point data -\> derive KDE & 2nd-Order Point Pattern Analysis)
    -   **Caution!** dataset is very large! For point 2, it may take 8 mins. For point 3, it may take half a day.
    -   Make sure to estimate the time, effort you require -\> plan ahead

Case Study:

History of Myanmar Armed Conflict:

Current Situation:

Study Area:

Focus and Objective:

Analysis Methods Used:

Our main purpose here this time is to study the **quarterly spatio-temporal distribution of armed conflict events in Myanmar**. Therefore, the focus is mainly on the **types of events**, **date of events**, and the **location of events**. We will not be focusing on other matters in this exercise.

# Import the Necessary

## Import Libraries / Packages

```{r}
pacman::p_load(tidyverse, sf, spatstat, ggplot2, tmap, gifski, sparr, raster)
```

## Import Raw Data

### ACLED Data Set

Before we start manipulating the data, it is important that we understand what each data column and data type mean and how valuable it is for our analysis.

To begin, let us refer to the [ACLED data set codebook](https://acleddata.com/acleddatanew/wp-content/uploads/dlm_uploads/2023/06/ACLED_Codebook_2023.pdf)

The data was retrieved from the ACLED data portal. Specifically, the following types of data was retrieved:

1.  `violence-against-civilians.csv`
2.  `strategic-developments.csv`
3.  `battles.csv`
4.  `explosion-or-remoteviolence.csv`

In terms of event types, four main event types were retrieved: **Battles**, **Explosion/Remote violence**, **Strategic developments**, and **Violence against civilians**.

In terms of study period, we are focused on quarterly armed conflict events from **January 2021** until **June 2024.**

The code chunk below imports the data for our analysis.

```{r}
#| eval: false


violence_against_civilians <- read_csv("data/raw/aspatial/ACLED/violence-against-civilians.csv") %>%
  st_as_sf(coords =c(
    "longitude", "latitude"),
    crs=4326) %>%
    st_transform(crs = 32647) %>%
    mutate(event_date = dmy(event_date))

strategic_developments <- read_csv("data/raw/aspatial/ACLED/strategic-developments.csv") %>%
  st_as_sf(coords =c(
    "longitude", "latitude"),
    crs=4326) %>%
    st_transform(crs = 32647) %>%
    mutate(event_date = dmy(event_date))

battles <- read_csv("data/raw/aspatial/ACLED/battles.csv") %>%
  st_as_sf(coords =c(
    "longitude", "latitude"),
    crs=4326) %>%
    st_transform(crs = 32647) %>%
    mutate(event_date = dmy(event_date))

explosion_or_remoteviolence <- read_csv("data/raw/aspatial/ACLED/explosion-or-remoteviolence.csv") %>%
  st_as_sf(coords =c(
    "longitude", "latitude"),
    crs=4326) %>%
    st_transform(crs = 32647) %>%
    mutate(event_date = dmy(event_date))
```

### Administrative Boundary Dataset

[![Myamar's Administrative Division Hierachy (source: Wikipedia)](images/clipboard-2034245623.png){fig-alt="Myamar's Administrative Division Hierachy" fig-align="center"}](https://en.wikipedia.org/wiki/Administrative_divisions_of_Myanmar)

In this exercise, we will only analyse geographical distribution of point data up to the 3rd degree administrative division, i.e. up to Township level.

The following data are the administrative boundaries of Myanmar, obtained from [MIMU Vector Boundaries](https://geonode.themimu.info/layers/?limit=100&offset=0&type__in=vector&category__identifier__in=boundaries), a common data and information repository by a NGO (related to UN).

While many data formats exist, we will choose `.csv` files when downloading as they are easier to read and work with. A suitable alternative is the `.shp` file format available on the website.

Datasets:

-   `mmr_polbnda_adm0_250k_mimu_1.csv` National boundary of Myanmar

-   `mmr_polbnda_adm1_250k_mimu_1.csv` **Region/State/Union Territory** level boundary of Myanmar

-   `mmr_polbnda2_adm1_250k_mimu_1.csv` **Sub-Region/State/Union Territory** level boundary of Myanmar; Sub-region divides a region into smaller divisions, such as "Bago (East)" and "Bago (West)" instead of "Bago"

-   `mmr_polbnda_adm2_250k_mimu.csv` **District/Self-Administered Zone** level boundary of Myanmar

-   `mmr_polbnda_adm3_250k_mimu_1.csv` **Township** level boundary of Myanmar

```{r}
#| eval: false


# kml file not easy to read due to nested columns for attributes data
admin_0 <- read_csv("data/raw/geospatial/mimu_admin_boundary/mmr_polbnda_adm0_250k_mimu_1.csv") %>%
  st_as_sf(wkt = "the_geom",
    crs=4326) %>%
    st_transform(crs = 32647)
    
admin_1 <- read_csv("data/raw/geospatial/mimu_admin_boundary/mmr_polbnda_adm1_250k_mimu_1.csv") %>%
  st_as_sf(wkt = "the_geom",
    crs=4326) %>%
    st_transform(crs = 32647)

admin_1_sub <- read_csv("data/raw/geospatial/mimu_admin_boundary/mmr_polbnda2_adm1_250k_mimu_1.csv") %>%
  st_as_sf(wkt = "the_geom",
    crs=4326) %>%
    st_transform(crs = 32647)

admin_2 <- read_csv("data/raw/geospatial/mimu_admin_boundary/mmr_polbnda_adm2_250k_mimu.csv") %>%
  st_as_sf(wkt = "the_geom",
    crs=4326) %>%
    st_transform(crs = 32647)

admin_3 <- read_csv("data/raw/geospatial/mimu_admin_boundary/mmr_polbnda_adm3_250k_mimu_1.csv") %>%
  st_as_sf(wkt = "the_geom",
    crs=4326) %>%
    st_transform(crs = 32647)
```

### Quick Plot To Visualise Data Sets

Before we continue, let's get a visual sense of the data by plotting it on a map to ensure we are working with the right dataset. In this step, we will also try to see if there are any erranous data that we have to clean later.

**Check the Administrative Boundaries Data Set**

From the left to right, we are able to see the increase in degree of administrative boundary division; respectively, they represent

1.  "**National**",
2.  "**Region/State/Union Territory**",
3.  "**Sub-Region/State/Union Territory**",
4.  "**District/Self-Administered Zone**", and
5.  "**Township**"

```{r}
#| eval: false


tmap_mode("plot")
tmap_style("classic")

tmap_arrange(
  qtm(admin_0, title="National"), 
  qtm(admin_1, title="Region/State/Union\nTerritory"), 
  qtm(admin_1_sub, title="Sub-Region/State/Union\nTerritory"), 
  qtm(admin_2, title="District/Self-\nAdministered Zone"), 
  qtm(admin_3, title="Township"), 
  ncol = 5
)
```

![Plot of Admin Boundaries of Myanmar Raw Data](images/unnamed-chunk-4-1.png){fig-align="center"}

**Conclusion: Administrative Boundaries Looks Okay**

Looking at both the attribute table and the plot, the administrative boundaries data seem quite alright, so we might not need to do any cleaning. Anyway, the precision of the polygons it not as critical as the precision of the ACLED data (which will be used for our spatial point patterns analysis).

**Check ACLED Data Set**

Since the ACLED data is our main focus, let us now plot the data points onto the map of Myanmar.

In the code chunk below, we plot out the various types of data points from ACLED, namely (from left to right):

1.  "**Violence against Civilians**",
2.  "**Strategic Developments**",
3.  "**Explosion/Remote Violence**", and
4.  "**Battles**"

```{r}
#| eval: false


tmap_mode("plot")
tmap_style("cobalt")

tmap_arrange(
  qtm(admin_0) + qtm(violence_against_civilians, title="Violence against\nCivilians"), 
  qtm(admin_0) + qtm(strategic_developments, title="Strategic\nDevelopments"), 
  qtm(admin_0) + qtm(explosion_or_remoteviolence, title="Explosion/\nRemote Violence"), 
  qtm(admin_0) + qtm(battles, title="Battles"), 
  ncol = 4
)
```

![Plot of ACLED Raw Points Data](images/unnamed-chunk-5-1.png){fig-align="center"}

**Observation: ACLED Data Set needs further study, may need to clean**

Nothing looks very off at a glance, but we should look into the attribute columns to see if the data set is truly clean. Let us refer to the [codebook](https://acleddata.com/acleddatanew/wp-content/uploads/dlm_uploads/2023/06/ACLED_Codebook_2023.pdf) again, and see if we can spot any potentially critical problems.

Referring to the attribute columns and the codebook, we can see potentially critical concerns:

1.  **geo_precision** – The precision of the geocoded coordinates ranges from code 1 to code 3; where lower level implies higher precision.
    -   In particular, "\[if\] a larger region is mentioned, the closest natural location noted in reporting (like “border area,” “forest,” or “sea,” among others) – or a provincial capital is used if no other information at all is available – is chosen to represent the region, and ‘Geo-precision’ code 3 is recorded." (page 36)
2.  **time_precision** – The precision of the recorded datetime ranges from code 1 to code 3; where lower level implies higher precision.
    -   In particular, "if the source material only indicates that an event took place sometime during a month (i.e. in the past two or three weeks, or in January), without reference to the particular date, the month mid-point is chosen. If the beginning or end of the month is noted, the first and last date is used, respectively. In both of these cases, a ‘Time precision’ code of 3 is recorded." (page 36-37)

In both cases, ACLED do not include events with less spatial or temporal precision.

**Identifying code 3 precisions**

Given that precision of our point data is crucial to our spatial-temporal point patterns analysis, we should see how much of our data is imprecise, and whether we should keep the imprecise data points.

```{r}
#| eval: false


# Violence against Civilians
violence_against_civilians %>% count(geo_precision)
violence_against_civilians %>% count(time_precision)

# Strategic Developments
strategic_developments %>% count(geo_precision)
strategic_developments %>% count(time_precision)

# Explosion or Remote Violence
explosion_or_remoteviolence %>% count(geo_precision)
explosion_or_remoteviolence %>% count(time_precision)

# Battles
battles %>% count(geo_precision)
battles %>% count(time_precision)
```

**Conclusion: Drop time and spatial precision code 3 data values from ACLED Data set**

From this analysis, we can see that the count of precision code 3 in both time and spatial precision is actually very low, it might be worth dropping the values with low time and spatial precision.

Let us start cleaning the data

## Data Cleaning

Let us filter out the data we want (time_precision and geo_precision codes \< 3), and see how many rows we have removed.

```{r}
#| eval: false


# Extract all rows where either geo_precision or time_precision is not = 3 
violence_against_civilians_filtered <- violence_against_civilians %>%
  filter(!(geo_precision == 3 | time_precision == 3))

strategic_developments_filtered <- strategic_developments %>%
  filter(!(geo_precision == 3 | time_precision == 3))

explosion_or_remoteviolence_filtered <- explosion_or_remoteviolence %>%
  filter(!(geo_precision == 3 | time_precision == 3))

battles_filtered <- battles %>%
  filter(!(geo_precision == 3 | time_precision == 3))

cat("Number of rows dropped:", nrow(violence_against_civilians) - nrow(violence_against_civilians_filtered) , "\n")
cat("Number of rows dropped:", nrow(strategic_developments) - nrow(strategic_developments_filtered) , "\n")
cat("Number of rows dropped:", nrow(explosion_or_remoteviolence) - nrow(explosion_or_remoteviolence_filtereed) , "\n")
cat("Number of rows dropped:", nrow(battles) - nrow(battles_filtered) , "\n")
```

**Overall, the result seems satisfactory**. Let us continue with our data cleaning. by keeping only columns that are important for our analysis.

We will only **keep the following columns** as other columns are not relevant to our study:

-   event_date,
-   year,
-   disorder_type,
-   sub_event_type,
-   admin1,
-   admin2,
-   admin3
-   (also including the geometry data)

```{r}
#| eval: false


filter_columns <- c("event_date","year","disorder_type","sub_event_type","admin1","admin2","admin3")

violence_against_civilians_filtered <- violence_against_civilians_filtered %>%
  select(all_of(filter_columns))

strategic_developments_filtered <- strategic_developments_filtered %>%
  select(all_of(filter_columns))

explosion_or_remoteviolence_filtered <- explosion_or_remoteviolence_filtered %>%
  select(all_of(filter_columns))

battles_filtered <- battles_filtered %>%
  select(all_of(filter_columns))
```

## Data Extraction

### Extract Quarterly Data from ACLED Dataset

Now, since we want to analyse the quarterly events, let us add a new column within the tibble DataFrame called **quarter** to represent the quarter of each date in numerical format, e.g. (1, 2, 3, or 4). After that, let us create another column called **year_quarter** to represent the quarter of every year in string format, e.g. ("2021-Q1", "2023-Q4").

The package we will be using here is called lubridate, a package within the tidyverse library.

```{r}
#| eval: false

violence_against_civilians_filtered <- violence_against_civilians_filtered %>% 
  mutate(quarter = quarter(event_date)) %>%
  mutate(year_quarter = paste0(year, "-Q", quarter))

strategic_developments_filtered <- strategic_developments_filtered %>% 
  mutate(quarter = quarter(event_date)) %>%
  mutate(year_quarter = paste0(year, "-Q", quarter))

explosion_or_remoteviolence_filtered <- explosion_or_remoteviolence_filtered %>% 
  mutate(quarter = quarter(event_date)) %>%
  mutate(year_quarter = paste0(year, "-Q", quarter))

battles_filtered <- battles_filtered %>% 
  mutate(quarter = quarter(event_date)) %>%
  mutate(year_quarter = paste0(year, "-Q", quarter))
```

## Export Data Sets (RDS file format)

Before we continue, let's export our cleaned data sets so that our changes are saved. **We will export the data sets in the RDS format.**

RDS stands for R Data Serialization. It’s a binary serialization format in R used to save R objects to a file. This format preserves the class, attributes, and structure of the R object, making it useful for saving and loading data while maintaining its integrity.

::: {.callout-tip collapse="true"}
By exporting the data, and importing it again, it also serves as a *checkpoint* for our analysis. We will be able to stop loading old variables in our environment, and only load in the new variables. It also allows readers who are trying to reproduce the analysis verify their own results with our analysis results.
:::

```{r}
#| eval: false

# Save the sf object to an RDS file
saveRDS(violence_against_civilians_filtered, "data/rds/violence_against_civilians.rds")
saveRDS(strategic_developments_filtered, "data/rds/strategic_developments.rds")
saveRDS(explosion_or_remoteviolence_filtered, "data/rds/explosion_or_remoteviolence.rds")
saveRDS(battles_filtered, "data/rds/battles.rds")
```

```{r}
#| eval: false

# Save the sf object to an RDS file
saveRDS(admin_0, "data/rds/admin_boundary_national.rds")
saveRDS(admin_1, "data/rds/admin_boundary_region-state-unionTerritory.rds")
saveRDS(admin_1_sub, "data/rds/admin_boundary_subRegion-state-unionTerritory.rds")
saveRDS(admin_2, "data/rds/admin_boundary_district-selfAdministeredZone.rds")
saveRDS(admin_3, "data/rds/admin_boundary_township.rds")
```

Now, let's continue to the next section.

# Import Data Sets (RDS file format)

Let us import the data sets back.

The code chunk below imports the cleaned and filtered ACLED data that was previously exported into RDS file format.

```{r}
#| eval: false
violence_against_civilians <- readRDS("data/rds/violence_against_civilians.rds")
strategic_developments <- readRDS("data/rds/strategic_developments.rds")
explosion_or_remoteviolence <- readRDS("data/rds/explosion_or_remoteviolence.rds")
battles <- readRDS("data/rds/battles.rds")
```

The code chunk below imports the transformed admin boundaries data that was previously exported into RDS file format. Note that we have yet to decide on a study area, so we will continue to import all the data for our analysis.

```{r}
#| eval: false
admin_0 <- readRDS("data/rds/admin_boundary_national.rds")
admin_1 <- readRDS("data/rds/admin_boundary_region-state-unionTerritory.rds")
admin_1_sub <- readRDS("data/rds/admin_boundary_subRegion-state-unionTerritory.rds")
admin_2 <- readRDS("data/rds/admin_boundary_district-selfAdministeredZone.rds")
admin_3 <- readRDS("data/rds/admin_boundary_township.rds")
```

## Visualise the Myanmar States Boundaries

```{r}
#| eval: false
tm_shape(admin_1) +
  tm_style("white") +
  tm_polygons("ST", palette = "Set3", title = "States/Regions") +
  tm_shape(st_centroid(admin_1)) + # Find the centroids
  tm_text("ST", size = 0.6, col = "black", shadow = TRUE, just="center") + # Add labels at centroids
  tm_layout(title = "Administrative Boundaries Level 1",
            legend.outside = TRUE)
```

![](images/clipboard-2782946147.png){fig-align="center"}

## Visualise Main Event ACLED data

Now that we have categorised the ACLED points data into specific yearly quarters, let us plot them onto the map of myanmar to see if there are any obvious patterns.

So far, we can have up to 14 temporal categories, with 4 quarters per year in **Year 2021, 2022, 2023**, and 2 quarters in the **first half of 2024**.

```{r}
#| eval: false


tmap_mode("plot")
tmap_style("classic")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(violence_against_civilians) +
  tm_dots(size= 0.05, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Violence Against Civilians (Quarterly)")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(strategic_developments) +
  tm_dots(size= 0.05, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Strategic Developments (Quarterly)")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(explosion_or_remoteviolence) +
  tm_dots(size= 0.05, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Explosion/Remote Violence (Quarterly)")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(battles) +
  tm_dots(size= 0.05, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Battles (Quarterly)")
```

![](images/unnamed-chunk-14-1.png){fig-align="center"}

![](images/unnamed-chunk-14-2.png){fig-align="center"}

![](images/unnamed-chunk-14-3.png){fig-align="center"}

![](images/unnamed-chunk-14-4.png){fig-align="center"}

```{r}
#| eval: false

tmap_mode("plot")

map_quarterly_ViolAgstCiv <- tm_shape(admin_1) +
  tm_style("white") +
  tm_polygons() +
  tm_shape(violence_against_civilians) +
  tm_dots(size= 0.1) + # make sizes a bit bigger so that it can be seen
  tm_facets(along = "year_quarter", # 1 separate map for each year quarter
              free.coords = FALSE,
              drop.units = TRUE)

map_quarterly_StratDev <- tm_shape(admin_1) +
  tm_style("white") +
  tm_polygons() +
  tm_shape(strategic_developments) +
  tm_dots(size= 0.1) + # make sizes a bit bigger so that it can be seen
  tm_facets(along = "year_quarter", # 1 separate map for each year quarter
              free.coords = FALSE,
              drop.units = TRUE)

map_quarterly_ExploOrRemoViol <- tm_shape(admin_1) +
  tm_style("white") +
  tm_polygons() +
  tm_shape(explosion_or_remoteviolence) +
  tm_dots(size= 0.1) + # make sizes a bit bigger so that it can be seen
  tm_facets(along = "year_quarter", # 1 separate map for each year quarter
              free.coords = FALSE,
              drop.units = TRUE)

map_quarterly_Battles <- tm_shape(admin_1) +
  tm_style("white") +
  tm_polygons() +
  tm_shape(battles) +
  tm_dots(size= 0.1) + # make sizes a bit bigger so that it can be seen
  tm_facets(along = "year_quarter", # 1 separate map for each year quarter
              free.coords = FALSE,
              drop.units = TRUE)

tmap_animation(map_quarterly_ViolAgstCiv,
               filename="images/quarterly_violenceAgainstCivilians.gif", delay=100)

tmap_animation(map_quarterly_StratDev,
               filename="images/quarterly_strategicDevelopments.gif", delay=100)

tmap_animation(map_quarterly_ExploOrRemoViol,
               filename="images/quarterly_explosionOrRemoteViolence.gif", delay=100)

tmap_animation(map_quarterly_Battles,
               filename="images/quarterly_battles.gif", delay=100)
```

![Quarterly events: Violence Against Civilians](images/quarterly_violenceAgainstCivilians.gif){fig-alt="Quarterly events: Violence Against Civilians" fig-align="center" width="200"}

![Quarterly events: Strategic Developments](images/quarterly_strategicDevelopments.gif){fig-alt="Quarterly events: Strategic Developments" fig-align="center" width="200"}

![Quarterly events: Explosion / Remote Violence](images/quarterly_explosionOrRemoteViolence.gif){fig-alt="Quarterly events: Explosion / Remote Violence" fig-align="center" width="200"}

![Quarterly events: Battles](images/quarterly_battles.gif){fig-alt="Quarterly events: Battles" fig-align="center" width="200"}

### Conclusion: Filter Again

Looking at the data, while we are able to see some trends along the 4 data sets, they are roughly the same. So let us filter our data sets and focus on sub-event types.

Referring to ACLED's codebook again, we see that event types are further categorised as sub-event types. For the purpose of this analysis, I have chosen the following event types from each data set:

1.  `Abduction/forced disappearance` from **Violence Against Civilians** (901 data points)
2.  `Change to group/activity` from **Strategic Developments** (1230 data points)
3.  `Shelling/artillery/missile attack` from **Explosion/Remote Violence** (3650 data points)
4.  `Non-state actor overtakes territory` from **Battles** (274 data points) (can also be further broken down into different types of takeover, but I have chosen to ignore it this time)

If you are interested, the description of the event types are as follows (copied from the [ACLED codebook](https://acleddata.com/acleddatanew/wp-content/uploads/dlm_uploads/2023/06/ACLED_Codebook_2023.pdf)):

1.  `Abduction/forced disappearance`: This sub-event type is used when an actor engages in the abduction or forced disappearance of civilians, without reports of further violence. If fatalities or serious injuries are reported during the abduction or forced disappearance, the event is recorded as an ‘Attack’ event instead. If such violence is reported in later periods during captivity, this is recorded as an additional ‘Attack’ event. Note that multiple people can be abducted in a single ‘Abduction/forced disappearance’ event. Arrests by non-state groups and extrajudicial detentions by state forces are considered ‘Abduction/forced disappearance’. Arrests conducted by state forces within the standard judicial process are, however, considered ‘Arrests'.
2.  `Change to group/activity`: This sub-event type is used to record significant changes in the activity or structure of armed groups. It can cover anything from the creation of a new rebel group or a paramilitary wing of the security forces, ‘voluntary’ recruitment drives, movement of forces, or any other non-violent security measures enacted by armed actors. This sub-event type can also be used if one armed group is absorbed into a different armed group or to track large-scale defections.
3.  `Shelling/artillery/missile attack`: This sub-event type captures the use of long-range artillery, missile systems, or other heavy weapons platforms in the absence of any other engagement. When two armed groups exchange long-range fire, it is recorded as an ‘Armed clash’. ‘Shelling/artillery/missile attack’ events include attacks described as shelling, the use of artillery and cannons, mortars, guided missiles, rockets, grenade launchers, and other heavy weapons platforms. Crewed aircraft shot down by long-range systems fall under this sub-event type. Uncrewed armed drones that are shot down, however, are recorded as interceptions under ‘Disrupted weapons use’ because people are not targeted.
4.  `Non-state actor overtakes territory`: This sub-event type is used when a non-state actor (excluding those operating directly on behalf of the government) or a foreign state actor, through armed interaction, captures territory from an opposing government or non-state actor; as a result, they are regarded as having a monopoly of force within that territory. Short-lived and/or small-scale territorial exchanges that do not last for more than one day are recorded as ‘Armed clash’ events. In cases where non- state forces fight with opposing actors in a location many times before gaining control, only the final territorial acquisition is recorded as ‘Non-state actor overtakes territory’. All other battles in that location are recorded as ‘Armed clash’.

**Some Extra Observations**

It would appear that in the main event type Explosion / Remote Violence, there are also Sub-event categories such as Suicide bombs and Chemical weapons, but their occurrences are not high. There are 2 recorded cases of suicide bombs and 1 case of chemical weapons in the study period in Myanmar.

There are also other instances of these *strange* events available in the data sets.

A reason I have not chosen these seemingly interesting events are that they are too rare and do not provide sufficient amount of data for our analysis. Though, of course, the fact that they are rare is a good sign, from the perspective of a layman.

**Reasons**

I have chosen to focus on the mentioned 4 sub-event types simply because they sound interesting, and they provide enough data points for our analysis later on, which includes first and second order point pattern analysis, as well as spatio-temporal point pattern analysis.

Previously, I have attempted to analyse all event types by selecting a study area, but I realise I was not able to draw out much conclusion. Refer to the section "Previous Attempts on This Exercise" for a glance of my previous attempts.

### Extracting Sub-event Types from Each Main Event Type Data Set

Let us now extract the data points that we want from each data set and visualise the data points over time.

```{r}
#| eval: false
abduction_sf <- violence_against_civilians %>% 
  filter(sub_event_type == "Abduction/forced disappearance")

# changeGroup_sf <- strategic_developments %>% 
#   filter(sub_event_type == "Change to group/activity")
# 
# shelling_sf <- explosion_or_remoteviolence %>%
#   filter(sub_event_type == "Shelling/artillery/missile attack")
# 
# overtake_sf <- battles %>%
#   filter(sub_event_type == "Non-state actor overtakes territory")
```

## Visualising the Sub-Event ACLED Data Set

```{r}
#| eval: false

tmap_mode("plot")
tmap_style("classic")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(abduction_sf) +
  tm_dots(size= 0.1, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Abduction/forced disappearance (Quarterly)")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(changeGroup_sf) +
  tm_dots(size= 0.1, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Change to group/activity (Quarterly)")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(shelling_sf) +
  tm_dots(size= 0.1, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Shelling/artillery/missile attack (Quarterly)")

tm_shape(admin_1) +
  tm_polygons() +
  tm_shape(overtake_sf) +
  tm_dots(size= 0.1, col = "black", alpha = 0.5) +
  tm_facets(by = "year_quarter",
              free.coords = FALSE,
              drop.units = TRUE) +
  tm_layout(main.title="Non-state actor overtakes territory (Quarterly)")
```

![](images/clipboard-4194991678.png)

![](images/clipboard-4026960393.png)

![](images/clipboard-2303509002.png)

![](images/clipboard-3450628062.png)

### Conclusion: Data set seems ready.

Overall, it seems like there are more obvious trends and the data is easier to work with now. Some things we can see at a glance is that.

1.  There seems to be quite a number of abduction cases in the central part of Myanmar (in states Mandalay and Sagaing). These cases seem to be happening along the border of the states, but more remains to be seen.
2.  Changes to group / activity seem to also be happening in the same central areas, no big trends so far.
3.  Shelling seems to be occuring everywhere, not much pattern to see.
4.  Non-state actors overtaking seems to be occuring in northen Rakhine in the latter parts of the data set periods (from 2023 Q4 to 2024 Q2). If we were to compare this with the other event types, we can also see similar trend. In fact, at a glance, we can see that these shellings and artillery strikes seem to be happening at the same period of these territory takeover events in the northern Rakhine state.

Since all the events seem to be happening in the central/upper parts of Myanmar, let us select those states as our study area. The **study area includes: "Magway", "Chin", "Sagaing"**.

::: callout-note
I do not have enough time for the analysis, so I will only focus on the abduction cases in these 3 states.
:::

### Final Extract of Data Sets

```{r}
#| eval: false
studyarea_sf <- admin_1 %>% 
  filter(ST %in% c("Magway", "Chin", "Sagaing"))

abduction_sf <- abduction_sf %>% 
  filter(admin1 %in% c("Magway", "Chin", "Sagaing"))

# changeGroup_sf <- changeGroup_sf %>% 
#   filter(admin1 %in% c("Magway", "Chin", "Sagaing"))
# 
# shelling_sf <- shelling_sf %>% 
#   filter(admin1 %in% c("Magway", "Chin", "Sagaing"))
# 
# overtake_sf <- overtake_sf %>%
#   filter(admin1 %in% c("Magway", "Chin", "Sagaing"))
```

## Export Data Sets (RDS file formats)

```{r}
#| eval: false
saveRDS(abduction_sf, "data/final_rds/abduction.rds")
# saveRDS(changeGroup_sf, "data/final_rds/changeGroup.rds")
# saveRDS(shelling_sf, "data/final_rds/shelling.rds")
# saveRDS(overtake_sf, "data/final_rds/overtake.rds")
saveRDS(studyarea_sf, "data/final_rds/studyarea.rds")
```

# 1st Order Points Pattern Analysis: Kernel Density Estimation (KDE)

## Import Data Sets (RDS file format)

Note that currently, we are left with:

1.  **abduction_sf: 326 data points**
2.  changeGroup_sf: 729 data points
3.  overtake_sf: 179 data points
4.  shelling_sf: 1977 data points

```{r}
abduction_sf <- readRDS("data/final_rds/abduction.rds")
studyArea_sf <- readRDS("data/final_rds/studyarea.rds")
```

## Create Owin Objects for Study Area

Let us first set our study area to the whole of Myanmar, simply because our number of data points of most of the sub-event types are not very large (except the `Shelling/artillery/missile attack` event)

```{r}
studyArea_owin <- studyArea_sf %>% as.owin()
```

### Converting SF into PPP objects

Due to time constraints on my side, let us compute the Kernel Density Estimate (KDE) on each event type throughout the whole event period. To do this, we will first need to convert our data points into PPP objects.

```{r}
abduction_ppp <- abduction_sf %>% as.ppp() %>% 
               rjitter(retry = TRUE, nsim = 1, drop = TRUE)
```

```{r}
abduction_ppp_study <- abduction_ppp[studyArea_owin]
```

## Choosing Adaptive Bandwidth Method

```{r}
#| eval: false
bw.CvL(abduction_ppp_study
       %>% rescale.ppp(s=100000, unitname="100km"))
bw.scott(abduction_ppp_study
       %>% rescale.ppp(s=100000, unitname="100km"))
bw.ppl(abduction_ppp_study
       %>% rescale.ppp(s=100000, unitname="100km"))
bw.diggle(abduction_ppp_study
       %>% rescale.ppp(s=100000, unitname="100km"))
```

Seems like the bandwidth varies quite a bit. Let us visualise the density estimates and choose based on the visual results.

```{r}
#| eval: false
abduction_ppp_100km <- abduction_ppp_study %>% rescale.ppp(s=100000, unitname="100km")
```

```{r fig.width=12, fig.height=12}
#| eval: false
abduction_ppp_100km.CvL <- density(abduction_ppp_100km,
                                sigma=bw.CvL,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_100km.scott <- density(abduction_ppp_100km,
                                sigma=bw.scott,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_100km.ppl <- density(abduction_ppp_100km,
                                sigma=bw.ppl,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_100km.diggle <- density(abduction_ppp_100km,
                                sigma=bw.diggle,
                                edge=TRUE,
                                kernel="gaussian")

par(mfrow=c(2,2))
plot(abduction_ppp_100km.CvL, main = "bw.CvL")
plot(abduction_ppp_100km.scott, main = "bw.scott")
plot(abduction_ppp_100km.ppl, main = "bw.ppl")
plot(abduction_ppp_100km.diggle, main = "bw.diggle")
par(mfrow=c(1,1))
```

Based on the results, the method: bw.diggle is too detailed and not useful for our analysis. We should therefore try either bw.ppl for a more detailed visualisation, or bw.scott for a more balanced visualisation. In fact, let us try splitting our study area into the 3 states and see if there is a difference.

### Separate the Study Area

```{r}
chin_owin <- studyArea_sf %>% filter(ST=="Chin") %>% as.owin()
magway_owin <- studyArea_sf %>% filter(ST=="Magway") %>% as.owin()
sagaing_owin <- studyArea_sf %>% filter(ST=="Sagaing") %>% as.owin()
```

```{r}
abduction_ppp_chin.100km <- abduction_ppp[chin_owin] %>% 
  rescale.ppp(s=100000, unitname="100km")

abduction_ppp_magway.100km <- abduction_ppp[magway_owin] %>% 
  rescale.ppp(s=100000, unitname="100km")

abduction_ppp_sagaing.100km <- abduction_ppp[sagaing_owin] %>% 
  rescale.ppp(s=100000, unitname="100km")
```

```{r fig.width=12, fig.height=12}
#| eval: false
abduction_ppp_chin.100km.CvL <- density(abduction_ppp_chin.100km,
                                sigma=bw.CvL,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_chin.100km.scott <- density(abduction_ppp_chin.100km,
                                sigma=bw.scott,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_chin.100km.ppl <- density(abduction_ppp_chin.100km,
                                sigma=bw.ppl,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_chin.100km.diggle <- density(abduction_ppp_chin.100km,
                                sigma=bw.diggle,
                                edge=TRUE,
                                kernel="gaussian")

par(mfrow=c(2,2))
plot(abduction_ppp_chin.100km.CvL, main = "bw.CvL")
plot(abduction_ppp_chin.100km.scott, main = "bw.scott")
plot(abduction_ppp_chin.100km.ppl, main = "bw.ppl")
plot(abduction_ppp_chin.100km.diggle, main = "bw.diggle")
par(mfrow=c(1,1))
```

![](images/clipboard-2066425568.png)

```{r fig.width=12, fig.height=12}
#| eval: false
abduction_ppp_magway.100km.CvL <- density(abduction_ppp_magway.100km,
                                sigma=bw.CvL,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_magway.100km.scott <- density(abduction_ppp_magway.100km,
                                sigma=bw.scott,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_magway.100km.ppl <- density(abduction_ppp_magway.100km,
                                sigma=bw.ppl,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_magway.100km.diggle <- density(abduction_ppp_magway.100km,
                                sigma=bw.diggle,
                                edge=TRUE,
                                kernel="gaussian")

par(mfrow=c(2,2))
plot(abduction_ppp_magway.100km.CvL, main = "bw.CvL")
plot(abduction_ppp_magway.100km.scott, main = "bw.scott")
plot(abduction_ppp_magway.100km.ppl, main = "bw.ppl")
plot(abduction_ppp_magway.100km.diggle, main = "bw.diggle")
par(mfrow=c(1,1))
```

![](images/clipboard-260942162.png)

```{r fig.width=12, fig.height=12}
#| eval: false
abduction_ppp_sagaing.100km.CvL <- density(abduction_ppp_sagaing.100km,
                                sigma=bw.CvL,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_sagaing.100km.scott <- density(abduction_ppp_sagaing.100km,
                                sigma=bw.scott,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_sagaing.100km.ppl <- density(abduction_ppp_sagaing.100km,
                                sigma=bw.ppl,
                                edge=TRUE,
                                kernel="gaussian")

abduction_ppp_sagaing.100km.diggle <- density(abduction_ppp_sagaing.100km,
                                sigma=bw.diggle,
                                edge=TRUE,
                                kernel="gaussian")

par(mfrow=c(2,2))
plot(abduction_ppp_sagaing.100km.CvL, main = "bw.CvL")
plot(abduction_ppp_sagaing.100km.scott, main = "bw.scott")
plot(abduction_ppp_sagaing.100km.ppl, main = "bw.ppl")
plot(abduction_ppp_sagaing.100km.diggle, main = "bw.diggle")
par(mfrow=c(1,1))
```

![](images/clipboard-1301117594.png)

In this case, bw.ppl seem like the better choice for our analysis. Based on the results so far, we can observe that most abduction cases seem to occur near the borders of the states.

# 2nd Order Points Pattern Analysis: L-Function & Completely Spatial Randomness Test with Monte Carlo

We will now test for whether the point patterns are randomly distributed. And if not randomly distributed, whether they are clustered or uniformly distributed?

## Chin State

```{r}
#| eval: false
L_chin = Lest(abduction_ppp_chin.100km, correction = "Ripley")
plot(L_chin, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(100km)")
```

![](images/clipboard-1430039805.png)

```{r}
#| eval: false
L_chin.csr <- envelope(abduction_ppp_chin.100km, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_chin.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

![](images/clipboard-4031161975.png)

## Magway State

```{r}
#| eval: false
L_magway = Lest(abduction_ppp_magway.100km, correction = "Ripley")
plot(L_magway, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(100km)")
```

![](images/clipboard-206224831.png)

```{r}
#| eval: false
L_magway.csr <- envelope(abduction_ppp_magway.100km, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_magway.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

![](images/clipboard-3644905663.png)

## Sagaing State

```{r}
#| eval: false
L_sagaing = Lest(abduction_ppp_sagaing.100km, correction = "Ripley")
plot(L_sagaing, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(100km)")
```

![](images/clipboard-3309039899.png)

```{r}
#| eval: false
L_sagaing.csr <- envelope(abduction_ppp_sagaing.100km, Lest, nsim = 99, rank = 1, glocal=TRUE)

plot(L_sagaing.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

![](images/clipboard-3266514276.png)

The overall results of the monte carlo tests for every study area also tells us that we are confident that the spatial points of the abduction events are clustered, and are not randomly distributed.

# Spatio-Temporal KDE

## Selecting Year-Quarters of Events

```{r}

# Function to convert year and quarter to numeric sequence
convert_year_quarter <- function(year, quarter) {
  # Calculate the numeric sequence
  numeric_sequence <- (year - 2021) * 4 + quarter
  return(numeric_sequence)
}

abduction_sf$numeric_quarter <- mapply(convert_year_quarter, abduction_sf$year, abduction_sf$quarter)
```

```{r}
abduction_yq <- abduction_sf %>% dplyr::select(`numeric_quarter`)
```

```{r}
abduction_yq.ppp <- abduction_yq %>% 
  as.ppp() %>% 
  rjitter(retry = TRUE, nsim = 1, drop = TRUE)
summary(abduction_yq.ppp)
```

## Including Owin Objects

```{r}
abduction_yq.ppp_chin <- abduction_yq.ppp[chin_owin]
abduction_yq.ppp_magway <- abduction_yq.ppp[magway_owin] 
abduction_yq.ppp_sagaing <- abduction_yq.ppp[sagaing_owin] 
```

## Plotting out the PPP Objects

```{r}
plot(abduction_yq.ppp_chin)
plot(abduction_yq.ppp_magway)
plot(abduction_yq.ppp_sagaing)
```

## Computing STKDE

### Chin State

```{r}
#| output: false
set.seed(1234)
BOOT.spattemp(abduction_yq.ppp_chin) 
```

```{r}
#| output: false
stkde_yq_chin <- spattemp.density(
  abduction_yq.ppp_chin,
  h = 36220.355136,
  lambda = 4.220534)
summary(stkde_yq_chin)
```

```{r}
plot(stkde_yq_chin, fix.range=TRUE)
```

### Magway State

```{r}
#| output: false
set.seed(1234)
BOOT.spattemp(abduction_yq.ppp_magway)
```

```{r}
#| output: false
stkde_yq_magway <- spattemp.density(
  abduction_yq.ppp_magway,
  h = 56861.966963,
  lambda = 1.035756)
summary(stkde_yq_magway)
```

```{r}
plot(stkde_yq_magway, fix.range=TRUE)
```

### Saging State

```{r}
#| output: false
set.seed(1234)
BOOT.spattemp(abduction_yq.ppp_sagaing)
```

```{r}
#| output: false
stkde_yq_sagaing <- spattemp.density(
  abduction_yq.ppp_sagaing,
  h = 46988.081654,
  lambda = 1.159582)
summary(stkde_yq_sagaing)
```

```{r}
plot(stkde_yq_sagaing, fix.range=TRUE)
```

# Plotting KDE and STKDE on Map

## Convert Plots into Rasters layers

```{r}
# library(stars)
# chin_KDE_sf <- raster(abduction_ppp_chin.100km.ppl) %>% st_as_stars()
# class(chin_KDE_sf)
# 
# tmap_mode("plot")
# tm_shape(chin_KDE_sf) +
#   tm_raster(palette = "-RdYlBu", title = "KDE") +
#   tm_basemap("OpenStreetMap") +
#   tm_layout(main.title = "KDE on OpenStreetMap")

```
